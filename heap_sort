//堆排序
//建堆：
//1、从后往前建堆，从第一个非叶子节点 （size-2）/2
//2、依次做向下调整。 结束条件（叶子节点  满足堆要求）
void AdjustDown(int array[],int size,int parent)
{
	//结束条件
	//叶子节点
	int maxChild;
	int left = parent * 2 + 1;
	int right = parent * 2 + 2;
	if (left >= size)
	{
		return;
	}
	//满足堆要求，先找最大孩子
	if (right < size)
	{
		if (array[left] < array[right])
		{
			maxChild = right;
		}
		else
		{
			maxChild = left;
		}
	}
	else
	{
		maxChild = left;
	}
		if (array[parent] >= array[maxChild])
		{
			return;
		}
		Swap(array + parent, array + maxChild);
		AdjustDown(array, size, maxChild);
	}
//排序
void Heap_sort(int array[], int size)
{
	//[(size - 2) / 2,0]
	int i;
	for (i = (size - 2) / 2; i >= 0; i--)
	{
		AdjustDown(array, size, i);
	}
	//堆建好了
	//第一次进循环，最大的数为0 要放在那 size-1
	for (i = 1; i < size; i++)
	{
		Swap(array, array + size - i);
			AdjustDown(array, size - i, 0);
		for (i = 0; i < size; i++)
		{
			Swap(array, array + size - i - 1);
			AdjustDown(array, size - i - 1, 0);
		}
	}
}
//不稳定 时间复杂度 O(nlog2n） 空间复杂度 O(n)
